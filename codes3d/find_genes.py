#!/usr/bin/env python

import argparse
import codes3d
import configparser
import os
import psutil
import sys

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("-i", "--interactions_files", nargs='+',
                        help="The file containing the interactions " +
                        "discovered for the queried SNPs, generated " +
                        "by find_interactions.py")
    parser.add_argument("-s", "--snps_file",  nargs='+',
                        help="The list of SNPs generated by process_inputs.py")
    parser.add_argument("-c", "--config", default=os.path.join(
        os.path.dirname('__file__'), "docs/codes3d.conf"),
        help="The configuration file to be used in this " +
        "instance (default: conf.py)")
    parser.add_argument("-o", "--output_dir", default="hiCquery_output",
                        help="The directory in which to output results " +
                        "(\"hiCquery_output\" by default).")

    parser.add_argument("-q", "--query_databases", type=str,
                        default="both",
                        help="[local] for only local databases. " +
                        "This will only include cis-eQTLs if using downloadable " +
                        "GTEx dataset. " +
                        "[online] for only online GTEx queries. " +
                        "[both] for both local and online queries " +
                        "(default: both).")
    parser.add_argument("-d", "--do_not_produce_summary", action="store_true",
                        default=False,
                        help="Do not produce summary files, stop after " +
                        "querying for eQTLs (default: False).")
    parser.add_argument("-S", "--suppress_intermediate_files", action="store_true",
                        default=False,
                        help="Do not produce intermediate files. These can be " +
                        "used to run the pipeline frim an intermediate stage " +
                        "in the event of interruption. (default: False).")
    parser.add_argument("-p", "--num_processes", type=int, default=1,
                        help="Desired number of processes for multiprocessing (default: 1).")
    parser.add_argument("-y", "--num_processes_summary", type=int,
                        default=min(psutil.cpu_count(), 32),
                        help="The number of processes for compilation of " +
                        "the results (default: %s)." %
                        str(min(psutil.cpu_count(), 32)))
    parser.add_argument("-f", "--fdr_threshold", type=float, default=0.05,
                        help="The FDR threshold to consider an eQTL " +
                        "statistically significant (default: 0.05).")
    parser.add_argument("-b", "--buffer_size_in", type=int, default=1048576,
                        help="Buffer size applied to file input during " +
                        "compilation (default:1048576)")
    parser.add_argument("-z", "--buffer_size_out", type=int, default=1048576,
                        help="Buffer size applied to file output during " +
                        "compilation (default:1048576)")
    parser.add_argument("-t", "--tissues", nargs='+',
                        help="Space-separated list of GTEx tissues to query. " +
                        "Default is all tissues")

    args = parser.parse_args()
    config = configparser.ConfigParser()
    config.read(args.config)
    fragment_database_fp = os.path.join(
        os.path.dirname(__file__),
        config.get("Defaults", "FRAGMENT_DATABASE_FP"))
    gene_bed_fp = os.path.join(
        os.path.dirname(__file__),
        config.get("Defaults", "GENE_BED_FP"))
    lib_dir = os.path.join(os.path.dirname(__file__),
                           config.get("Defaults", "LIB_DIR"))
    eqtl_data_dir = os.path.join(os.path.dirname(__file__),
                                 config.get("Defaults", "EQTL_DATA_DIR"))
    gene_database_fp = os.path.join(os.path.dirname(__file__),
                                    config.get("Defaults", "GENE_DATABASE_FP"))
    expression_table_fp = os.path.join(os.path.dirname(__file__),
                                       config.get("Defaults", "EXPRESSION_TABLE_FP"))
    gene_dict_fp = os.path.join(os.path.dirname(__file__),
                                config.get("Defaults", "GENE_DICT_FP"))
    snp_dict_fp = os.path.join(os.path.dirname(__file__),
                               config.get("Defaults", "SNP_DICT_FP"))

    if not os.path.isdir(args.output_dir):
        os.makedirs(args.output_dir)
    interactions = codes3d.parse_interactions_files(
        args.interactions_files)
    genes = codes3d.find_genes(
        interactions, lib_dir, gene_bed_fp, gene_dict_fp, args.output_dir, args.suppress_intermediate_files)
    if not args.do_not_produce_summary:
        if not args.snps_file:
            print("Please use the -s flagprovide path to the snps.txt file." +
                  "\nProgram terminating.")
            sys.exit()
        snps = codes3d.parse_snps_files(args.snps_file)
        tissues = codes3d.init_tissues(args.tissues)
        num_sig, p_values = codes3d.find_eqtls(
            snps, genes, eqtl_data_dir, gene_database_fp,
            args.fdr_threshold, args.query_databases, tissues,
            args.num_processes_summary, args.output_dir, gene_dict_fp, snp_dict_fp,
            suppress_intermediate_files=args.suppress_intermediate_files)
        codes3d.produce_summary(
            p_values, snps, genes, gene_database_fp, expression_table_fp,
            args.fdr_threshold, args.do_not_produce_summary, args.output_dir, args.buffer_size_in,
            args.buffer_size_out, args.num_processes_summary)
